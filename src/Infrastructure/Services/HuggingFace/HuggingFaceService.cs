using Application.Interfaces;
using Infrastructure.Clients;
using Infrastructure.DTOs.HuggingFace;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace Infrastructure.Services.HuggingFace;

public class HuggingFaceService : IHuggingFaceService
{
    private readonly IHuggingFaceApi _huggingFaceApi;
    private readonly ILogger<HuggingFaceService> _logger;
    private readonly IConfiguration _configuration;
    private readonly string _apiKey;
    private readonly string _embeddingModel;
    private readonly string _textGenerationModel;

    public HuggingFaceService(
        IHuggingFaceApi huggingFaceApi,
        ILogger<HuggingFaceService> logger,
        IConfiguration configuration)
    {
        _huggingFaceApi = huggingFaceApi ?? throw new ArgumentNullException(nameof(huggingFaceApi));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        
        _apiKey = Environment.GetEnvironmentVariable("HUGGINGFACE_API_KEY") ?? 
                  _configuration["HuggingFace:ApiKey"] ?? 
                  throw new InvalidOperationException("HuggingFace API Key is not configured. Set HUGGINGFACE_API_KEY environment variable or HuggingFace:ApiKey in configuration.");
        
        _embeddingModel = _configuration["HuggingFace:EmbeddingModel"] ?? "sentence-transformers/all-MiniLM-L6-v2";
        _textGenerationModel = _configuration["HuggingFace:TextGenerationModel"] ?? "microsoft/DialoGPT-medium";
    }

    public async Task<float[]> GenerateEmbeddingAsync(string text, string? model = null)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(text, nameof(text));
        
        var modelToUse = model ?? _embeddingModel;
        _logger?.LogDebug("Generating embedding using HuggingFace model: {Model} for text: {Text}", modelToUse, text);

        try
        {
            var request = new HuggingFaceEmbeddingRequestDto
            {
                Inputs = text,
                Options = new HuggingFaceOptionsDto
                {
                    WaitForModel = true,
                    UseCache = true
                }
            };

            var authorization = $"Bearer {_apiKey}";
            var embedding = await _huggingFaceApi.GenerateEmbeddingAsync(modelToUse, request, authorization);

            _logger?.LogInformation("Successfully generated embedding using HuggingFace model: {Model}", modelToUse);
            return embedding;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to generate embedding using HuggingFace model: {Model} for text: {Text}", modelToUse, text);
            throw;
        }
    }

    public async Task<string> GenerateTextAsync(string prompt, string? model = null)
    {
        return await GenerateTextAsync(prompt, maxTokens: 100, temperature: 0.7f, model: model);
    }

    public async Task<string> GenerateTextAsync(string prompt, int maxTokens = 100, float temperature = 0.7f, string? model = null)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(prompt, nameof(prompt));
        
        var modelToUse = model ?? _textGenerationModel;
        _logger?.LogDebug("Generating text using HuggingFace model: {Model} for prompt: {Prompt}", modelToUse, prompt);

        try
        {
            var request = new HuggingFaceTextGenerationRequestDto
            {
                Inputs = prompt,
                Parameters = new HuggingFaceTextParametersDto
                {
                    MaxNewTokens = maxTokens,
                    Temperature = temperature,
                    DoSample = true,
                    ReturnFullText = false,
                    TopP = 0.9f
                },
                Options = new HuggingFaceOptionsDto
                {
                    WaitForModel = true,
                    UseCache = true
                }
            };

            var authorization = $"Bearer {_apiKey}";
            var responses = await _huggingFaceApi.GenerateTextAsync(modelToUse, request, authorization);

            if (responses?.Length > 0)
            {
                var generatedText = responses[0].GeneratedText;
                _logger?.LogInformation("Successfully generated text using HuggingFace model: {Model}", modelToUse);
                return generatedText;
            }

            _logger?.LogWarning("No text generated by HuggingFace model: {Model}", modelToUse);
            return string.Empty;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to generate text using HuggingFace model: {Model} for prompt: {Prompt}", modelToUse, prompt);
            throw;
        }
    }
}
